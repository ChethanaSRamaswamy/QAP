{
	"info": {
		"_postman_id": "945494bb-d1c1-4ab9-a755-29bf47ecf365",
		"name": "Example collection",
		"description": "This collection is an example of how to use Postman tenant within QAP.  \nYou should not hardcode any values within your collection - just use a variable (in camel case format as in Helix/ELCelerate), and maintain the values for that variable for different brand sites within the corresponding feature file. Like in functional testing, you should logically group your collections under different features, for example, checkout related collections should be kept under checkout folder withing postman tenant. And you should use the same feature while uploading the test data to DB - try to reuse the existing data that is already available in the DB., for example, first name, last name and credit card details\n\nRefer - [https://confluence.esteeonline.com/display/QAP/Postman+-+Integration+with+QAP](https://confluence.esteeonline.com/display/QAP/Postman+-+Integration+with+QAP)\n\n**Note**: \"example_env.postman_environment\" in the examples folder is to test \"example_collection.postman_collection\" from Postman client. Postman tenant in QAP uses data from database\n\n### To execute a collection\n\nThere are multiple ways to execute your collection\n\n1. From CLI\n2. From Jenkins\n3. From GitHub Actions\n    \n\nRefer - [https://confluence.esteeonline.com/display/QAP/Postman+-+Execute+a+collection](https://confluence.esteeonline.com/display/QAP/Postman+-+Execute+a+collection)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7137308"
	},
	"item": [
		{
			"name": "GH users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);   \r",
							"    console.log(pm.response.text());\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/users/{{username}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"users",
						"{{username}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}