/**
 * @fileoverview
 * A sample test script to explain on how to use multi-dataset in ELCelerate.
 *
 * @description
 * This script uses ROM dataset to demonstrate multi-dataset script execution.
 * ROM CL US has 42 datasets and this script just
 * prints the test data for each dataset during each ietration.
 * You can set the datasets as comma separated values or as a rangle
 * in DATASETS env variable. Please refer .env.example
 *
 * Command to run this test: `npx playwright test --grep "@MULTIDATASET"`
 *
 */

const { test } = require('@playwright/test');
const ScriptDataAdapter = require('../../adapters/script_data_adapter.js');

const feature = 'ROM'; // ROM is a multi-dataset feature. CL US has 42 sets
const { SCOPE } = process.env;
const records = SCOPE ? JSON.parse(SCOPE) : [];

/**
 * Dataset array (generated by converting DATASETS to array)
 * @constant {Array<number>} sets
 */
const sets = ScriptDataAdapter.getMultiDatasets();

// Iterate through each site and run tests
records.forEach((tags) => {
  // Run the test for each dataset
  // This loop is requred only for multi-dataset features, not for regular tests
  sets.forEach((set) => {
    /**
     * Note: Set#${set} is added to the title to make
     * the test name unique and to identify the set details
     */
    test(`${tags} : Set#${set} PRINT MULTI-DATASET @MULTIDATASET`, async ({
      // eslint-disable-next-line no-unused-vars
      browser,
    }, testInfo) => {
      const canSkipTest = ScriptDataAdapter.isTestEligible(testInfo, tags);
      if (canSkipTest) {
        test.skip();
      }

      // const context = await browser.newContext();
      // const page = await context.newPage();
      const data = await ScriptDataAdapter.getScriptData(
        tags.split('-'),
        feature,
        testInfo.title,
        set // Pass the set number, not required for regular tests
      );

      await test.step('Test data of each set', async () => {
        // Print the test data related to a set
        console.log(data.testData);
      });
    });
  });
});
